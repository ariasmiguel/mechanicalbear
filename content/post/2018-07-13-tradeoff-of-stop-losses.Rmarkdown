---
title: Tradeoff of Stop Losses
author: Jason Taylor
date: '2018-07-10'
slug: tradeoff-of-stop-losses
draft: FALSE
summary: Stop losses are a popular strategy used by traders to achieve better performance
  by closing out of a losing trade. But do they work?
categories:
  - Tastytrade
tags:
  - Strangles
  - Stop Loss
header:
  caption: ''
  image: ''
---

### Market Measures - July 10, 2018

The setup - Montly SPY 16 delta strangles, 45DTE, hold to expiration, 1-5x loss of credit recieved

*Stop losses are a popular strategy used by traders to achieve better performance by closing out of a losing trade.*

*tastytrade ran a study where they compared managing 16 delta strangles in SPY, 45 DTE at expiration and 1x-5x credit received losses. They found that on average, stop losses hurt performance over the long run, because most of the trades you stopped out of eventually had a better P/L at expiration.*

Here I will recreate this study and extend it to include more underlyings to practice using the purrr package. This is the 
first attempt at recreating a Market Measure study and will be the basis of the tastytrade package on  [github](https://github.com/themechanicalbear/tastytrade).

#### Setup global options, load libraries:

```{r global_options, include = TRUE, results = FALSE}
knitr::opts_chunk$set(message = FALSE, tidy.opts = list(width.cutoff = 60)) 
suppressWarnings(suppressMessages(suppressPackageStartupMessages({
  library_list <- c("tidyverse", "tastytrade", "here", "DT", "htmlwidgets",
                    "pool", "shiny", "RJDBC")
  lapply(library_list, require, character.only = TRUE)})))
stock_list <- c("SPY", "IWM", "GLD", "QQQ", "DIA",
                "TLT", "XLE", "EEM", "EWZ", "FXE")
monthly <- readRDS(paste0(here::here(), "/data/monthly.RDS"))
args <- expand.grid(symbol = stock_list,
                    tar_dte = 45,
                    tar_delta_put = -0.16,
                    tar_delta_call = 0.16,
                    stringsAsFactors = FALSE)
```

#### Study function

```{r study}
study <- function(stock, tar_dte, tar_delta_put, tar_delta_call) {
  rs_conn <- tastytrade::redshift_connect("TASTYTRADE")
  options <- rs_conn %>%
    dplyr::tbl(stock) %>%
    dplyr::mutate(m_dte = abs(dte - tar_dte))
  
  options_monthly <- dplyr::filter(options, quotedate %in% monthly$date)
  
  open_puts <- tastytrade::open_short(options_monthly, tar_delta_put, "put")
  open_calls <- tastytrade::open_short(options_monthly, tar_delta_call, "call")
  
  all_trades <- dplyr::full_join(open_calls, open_puts, 
                                 by = c("quotedate", "expiration", "dte")) %>%
    dplyr::mutate(credit = call_open_credit + put_open_credit) 
  
  possible_closes <- function(df, date, exp, c_strike, p_strike, credit) {
    df %>%
      dplyr::filter(quotedate > date,
                    quotedate <= exp,
                    expiration == exp) %>%
      dplyr::filter((strike == c_strike & type == "call") |
                      (strike == p_strike & type == "put")) %>%
      dplyr::group_by(quotedate) %>%
      dplyr::mutate(open_date = date,
                    open_credit = credit,
                    debit = sum(mid, na.rm = TRUE),
                    profit = open_credit - debit,
                    loss_1_x = ifelse(debit >= 2 * credit, 1, 0),
                    loss_2_x = ifelse(debit >= 3 * credit, 1, 0),
                    loss_3_x = ifelse(debit >= 4 * credit, 1, 0),
                    loss_4_x = ifelse(debit >= 5 * credit, 1, 0),
                    loss_5_x = ifelse(debit >= 6 * credit, 1, 0)) %>%
      dplyr::ungroup() %>%
      dplyr::select(symbol, quotedate, expiration, open_date, open_credit,
                    debit, profit, loss_1_x, loss_2_x, loss_3_x, loss_4_x,
                    loss_5_x) %>%
      dplyr::distinct() %>%
      dplyr::collect() %>%
      dplyr::mutate(open_date = as.Date(open_date, origin = "1970-01-01"),
                    expiration = as.Date(expiration, origin = "1970-01-01"),
                    quotedate = as.Date(quotedate, origin = "1970-01-01"))
  }
  
  exits <- purrr::pmap_dfr(list(list(options), all_trades$quotedate, 
                                 all_trades$expiration, all_trades$call_strike,
                                 all_trades$put_strike, all_trades$credit), 
                            possible_closes)
  
  invisible(purrr::pmap(list(df = list(exits), 
                             col_name = list("loss_1_x", "loss_2_x", "loss_3_x",
                                             "loss_4_x", "loss_5_x")),
                        tastytrade::stop_loss))
  
  exits %>%
    dplyr::group_by(open_date) %>%
    dplyr::filter(quotedate == expiration) %>%
    dplyr::ungroup() %>%
    dplyr::arrange(quotedate) %>%
    dplyr::mutate(portfolio = cumsum(profit) * 100,
                  loss_type = "expiration") %>%
    dplyr::bind_rows(loss_1_x) %>%
    dplyr::bind_rows(loss_2_x) %>%
    dplyr::bind_rows(loss_3_x) %>%
    dplyr::bind_rows(loss_4_x) %>%
    dplyr::bind_rows(loss_5_x)
}
```

#### Run the study with purrr::map on each symbol
```{r run study}
results <- purrr::pmap_dfr(list(args$symbol, args$tar_dte, args$tar_delta_put,
                           args$tar_delta_call), study)

agg_table <- results %>%
    dplyr::group_by(symbol, loss_type) %>%
    dplyr::filter(open_date == max(open_date)) %>%
    dplyr::ungroup() %>%
    dplyr::mutate(rank = rank(-portfolio)) %>%
    dplyr::select(symbol, loss_type, rank) %>%
    tidyr::spread(., key = loss_type, value = rank)
```

#### Group returns to similar portfolio outcomes and split so the plots are not as large

```{r ggplots, fig.width = 8, fig.height = 10}
group_one_returns <- results %>%
  dplyr::filter(symbol %in% c("SPY", "IWM", "GLD", "QQQ", "DIA"))
group_two_returns <- results %>%
  dplyr::filter(symbol %in% c("TLT", "XLE", "EEM", "EWZ", "FXE"))

grouped_plot <- function(df) {
  ggplot(data = df, aes(x = quotedate, y = portfolio)) +
    geom_line(data = dplyr::filter(df, loss_type == "loss_1_x"), 
              aes(group = loss_type, color = "1X Stop")) +
    geom_line(data = dplyr::filter(df, loss_type == "loss_2_x"),
              aes(color = "2X Stop")) +
    geom_line(data = dplyr::filter(df, loss_type == "loss_3_x"),
              aes(color = "3X Stop")) +
    geom_line(data = dplyr::filter(df, loss_type == "loss_4_x"),
              aes(color = "4X Stop")) +
    geom_line(data = dplyr::filter(df, loss_type == "loss_5_x"),
              aes(color = "5X Stop")) +
    geom_line(data = dplyr::filter(df, loss_type == "expiration"),
              aes(color = "expiration")) +
    scale_fill_brewer() +
    theme_minimal() + 
    labs(title = "Portfolio Total Return (by stop loss)", x = "Trade Open Date",
         y = "Portfolio Value") +
    facet_grid(rows = vars(symbol), scales = "free_y")
}

grouped_plot(group_one_returns)
grouped_plot(group_two_returns)
```

#### This heat map shows the outcomes by stop loss type the darker the color the better the outcome  
These are ranked from (1-6) 1 being best  
On average holding to expiration performed best and stopping out too early performed the worst as seen in the mean row at the bottom.  
```{r heatmap, warning = FALSE, fig.width = 8}
df_heatmap <- agg_table %>%
  dplyr::bind_rows(summarise_all(., funs(if (is.numeric(.)) mean(.) else "_Mean"))) %>%
  data.table::melt(., id = 1, measure = 2:7)

ggplot(df_heatmap, aes(variable, symbol)) +
  geom_tile(aes(fill = value) , color = "white") +
  scale_fill_gradient(low = "steelblue", high = "white") +
  ylab("Symbol") +
  xlab("Exit") +
  theme(legend.title = element_text(size = 10),
        legend.text = element_text(size = 12),
        plot.title = element_text(size = 16),
        axis.title = element_text(size = 14,face = "bold"),
        axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(fill = "Exit")
```
